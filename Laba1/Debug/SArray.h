#pragma once
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
enum EMode { low = 0, deep = 1, mapping = 2 };

typedef int(*PFstrstr2int)(char*, const char*);
typedef int(*tresult)(int, int);
typedef int (*PFstr2int)(const char*);
//тип данных для функции вида:
//   int foo (char* sting)
//  фугнкция преобразует строку в число (свертка, подсчет букв, расчет CRC и тому подобное)
typedef char* (*PFstr2str)(char*);
//тип данных для функции вида:
//   char* foo (char* sting)
//  фугнкция формирует новую строку на основе существующей, выполняя некое преобразование данных 
//  например: сделать все будвы большими или развернуть строку
typedef int (*PFmap) (char*, PFstr2str, PFstr2int);
//тип данных для функции вида:
//   char* foo (char* sting, PFstr2str, PFstr2int)
//  фугнкция последовательно применяет две полученные в параметрах функции строки 
//  например: сделать все будвы большими или развернуть строку


struct SArray
{
	//Количсетво элементов массива
	unsigned int size;
	//Массив указателей на даныые
	void** data;
	//mode-режим работы с памятью
	//1-храним данные 
	//0-храним указатели
	 
	EMode mode;
};
//Создание массива
//n-количество элементов в массиве
//возврашает указатель на пустой массив или 0 если массив  не создан
SArray* create(unsigned int n, EMode mode);
//Заполняет элемент массива.
//SArray-структура 
//pos- позиция
//data- информация
//n-размер
int set(SArray* ar, unsigned int pos, const void* data,unsigned int n);
//Специальная версия для строки,длина вычисляется самой функцией  
// Заполняет элемент массива.
//SArray-структура 
//pos- позиция
//str- информация

int set(SArray* ar, unsigned int pos,const char* str);
//Специальная версия для указателей
// Заполняет элемент массива.
//SArray-структура 
//pos- позиция
//data- информация
int set(SArray* ar, unsigned int pos, void* data);
//Возвращает запрошенный элемент
void* get(SArray* ar, unsigned int pos);
//очищает выделенную память
void clear(SArray* str);
//конкатенация  масиивов
//возврашает новый массив состоящий из двух сложеныых массивов
SArray* sum(SArray* A, SArray* B);
//фильтрация данных 
//функция возвращает новый массив содержащий данные нужные по некоторому условию
//arr- исходные данные
//fwe - указатель на функцию, выполняющую фильтрацию
//tempstr- подстрока по которой выполняется поиск, 0-если для поиска подстрока не нужна
SArray* where(SArray* arr, PFstrstr2int fwe,const char* tempstr);
//map- функция возвращает новый массив, содержащий данные исходного массива модифицированные некоторой функцией
//arr- исходные данные
//foo- функция модификатор
SArray* map(SArray* arr, PFstr2str foo);
//map- функция возвращает новый массив, содержащий данные исходного массива модифицированные некоторой функцией
//arr- исходные данные
//foo- функция модификатор
SArray* map(SArray* arr, PFstr2int foo);
//Заполнение массива данными
int fillData(SArray* ar, unsigned int n);
//Печать массива
void print(SArray* arr);
// Функция "маппинга" функций. Выполняет последовательный вызов двух функций и применяет их к введенной строке
// входные параметры:
//  str - указатель на строку. если передан 0, то выполняем настройку функции 
//  foo - указатель на исходную функцию, используется только при инициализации
//  str - указатель на преобразующую функцию, используется только при инициализации
//  результат: модифицированная строка 
int mapfoo(const char* str, PFstr2str foo = 0, PFstr2int map = 0);




